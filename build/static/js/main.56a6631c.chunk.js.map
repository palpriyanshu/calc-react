{"version":3,"sources":["calc.js","display.js","keyboardComp.js","keyboard.js","App.js","serviceWorker.js","index.js"],"names":["Calc","props","state","currDisplayState","onNumberClick","bind","onSymbolClick","showResult","setDefault","this","setState","currNumberState","numbers","symbols","pressedKey","number","concat","Number","symbolPressed","length","slice","expression","flatMap","num","index","join","eval","setNumber","result","getResult","event","target","id","setDisplayState","setNumberState","symbol","setSymbol","className","clickHandlers","React","Component","Display","Button","onClick","name","createKeys","keys","handleClick","map","key","NumericKeys","ArithmeticKeys","FunctionalKeys","Keyboard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.56a6631c.chunk.js","sourcesContent":["import React from 'react';\nimport Keyboard from './keyboard';\nimport Display from './display';\n\nclass Calc extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { currDisplayState: '' };\n    this.onNumberClick = this.onNumberClick.bind(this);\n    this.onSymbolClick = this.onSymbolClick.bind(this);\n    this.showResult = this.showResult.bind(this);\n    this.setDefault = this.setDefault.bind(this);\n  }\n\n  setDefault() {\n    this.setState(() => ({\n      currDisplayState: '',\n      currNumberState: '',\n      numbers: [],\n      symbols: [],\n    }));\n  }\n\n  componentDidMount() {\n    this.setDefault();\n  }\n\n  setDisplayState(pressedKey) {\n    this.setState((state) => {\n      return { currDisplayState: state.currDisplayState + pressedKey };\n    });\n  }\n\n  setNumberState(number) {\n    this.setState((state) => {\n      return { currNumberState: state.currNumberState + number };\n    });\n  }\n\n  setNumber() {\n    this.setState((state) => {\n      const number = state.currNumberState;\n      const numbers = number\n        ? state.numbers.concat([Number(number)])\n        : state.numbers;\n      return { numbers, currNumberState: '' };\n    });\n  }\n\n  setSymbol(symbolPressed) {\n    this.setState((state) => {\n      const { symbols, numbers, currDisplayState } = state;\n      if (symbols.length >= numbers.length) {\n        return {\n          symbols: symbols.slice(0, -1).concat([symbolPressed]),\n          currDisplayState: currDisplayState.slice(0, -2).concat(symbolPressed),\n        };\n      }\n      return { symbols: symbols.concat([symbolPressed]) };\n    });\n  }\n\n  getResult(state) {\n    const expression = state.numbers\n      .flatMap((num, index) => [num, state.symbols[index]])\n      .join('');\n    return eval(expression);\n  }\n\n  showResult() {\n    this.setNumber();\n    this.setState((state) => {\n      const result = this.getResult(state);\n      return {\n        currDisplayState: result,\n        currNumberState: result,\n        numbers: [],\n        symbols: [],\n      };\n    });\n  }\n\n  onNumberClick(event) {\n    const number = event.target.id;\n    this.setDisplayState(number);\n    this.setNumberState(number);\n  }\n\n  onSymbolClick(event) {\n    const symbol = event.target.id;\n    this.setDisplayState(symbol);\n    this.setNumber();\n    this.setSymbol(symbol);\n  }\n\n  get clickHandlers() {\n    return {\n      onNumberClick: this.onNumberClick,\n      onSymbolClick: this.onSymbolClick,\n      showResult: this.showResult,\n      setDefault: this.setDefault,\n    };\n  }\n\n  render() {\n    const { currDisplayState } = this.state;\n    return (\n      <div className=\"calc\">\n        <Display expression={`${currDisplayState}`} />\n        <Keyboard clickHandlers={this.clickHandlers} />\n      </div>\n    );\n  }\n}\n\nexport default Calc;\n","import React from 'react';\n\nconst Display = (props) => <div className=\"display\">{props.expression}</div>;\n\nexport default Display;\n","import React from 'react';\n\nconst Button = (props) => (\n  <div className={props.className} onClick={props.onClick}>\n    {props.name}\n  </div>\n);\n\nconst createKeys = function (keys, handleClick) {\n  return keys.map((key) => (\n    <div id={key} className=\"button\" key={key} onClick={handleClick}>\n      {key}\n    </div>\n  ));\n};\n\nconst NumericKeys = function (props) {\n  const keys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '00', '0', '.'];\n  return <div className=\"numKeys\">{createKeys(keys, props.onClick)}</div>;\n};\n\nconst ArithmeticKeys = function (props) {\n  const keys = ['+', '-', '/', '*'];\n  return <div className=\"oprKeys\">{createKeys(keys, props.onClick)}</div>;\n};\n\nconst FunctionalKeys = function (props) {\n  return (\n    <div className=\"funcKeys\">\n      <Button className=\"button clrBtn\" name=\"clr\" onClick={props.setDefault} />\n      <Button className=\"button evalBtn\" name=\"=\" onClick={props.showResult} />\n    </div>\n  );\n}\n\nexport {\n  NumericKeys,\n  ArithmeticKeys,\n  FunctionalKeys\n}","import React from 'react';\nimport { NumericKeys, ArithmeticKeys, FunctionalKeys } from './keyboardComp';\n\nconst Keyboard = function (props) {\n  const { onSymbolClick, onNumberClick, setDefault, showResult, } = props.clickHandlers;\n  return (\n    <div className=\"keyboard\">\n      <div className=\"leftPanel\">\n        <NumericKeys onClick={onNumberClick} />\n      </div>\n      <div className=\"rightPanel\">\n        <FunctionalKeys setDefault={setDefault} showResult={showResult} />\n        <ArithmeticKeys onClick={onSymbolClick} />\n      </div>\n    </div>\n  );\n};\n\nexport default Keyboard;\n","import React from 'react';\nimport './App.css';\nimport Calc from './calc';\n\nconst App = () => <Calc />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}